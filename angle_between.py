import numpy as np
import math
import matplotlib.pyplot as plt

def rms(a):
    b = np.square(a)
    c = np.sum(b)
    n = len(a)
    rms = np.round(np.sqrt(c/n))
    return rms

def angle_try4(a, b):
    a = np.squeeze(a)
    b = np.squeeze(b)
    dot = np.dot(a, b)
    norm_a = np.linalg.norm(a)
    norm_b = np.linalg.norm(b)
    cos_theta = dot / (norm_a*norm_b)
    theta = np.arccos(cos_theta)
    return np.degrees(theta)

def angle_hist(a, bins = None, xlimit = None, name = None, title = None):
    x = np.logspace(-2, 2.2552725051, num = bins)
    plt.hist(a, x, density = True)
    plt.grid(linestyle = '--')
    plt.xlabel(r'Degrees ($\theta$)')
    plt.ylabel('Counts')
    plt.xscale("log")
    plt.title(r'Degrees between e$^{-}$/e$^{+}$ pair production vertex'+str(title))
    plt.savefig('/fast_scratch/ipress/emu/skdetsim/plots/angles'+str(name)+'.png')
    plt.close()
    

def distance_hist(a, bins = None, xlimit = None, name = None, title = None):
    x = np.logspace(-2, 2.2552725051, num = bins)
    plt.hist(a, x, density = True)
    plt.grid(linestyle = '--')
    plt.xlabel(r'Distance between e$^{-}$/e$^{+}$ (cm)')
    plt.ylabel('Counts')
    plt.xscale("log")
    mean_a = np.round(np.mean(a))
    mean_b = np.round(np.mean(b))
    RMS_a = rms(a)
    RMS_b = rms(b)
    plt.text(mean_a, 0, f'mean_muon = {mean_a}\nmean_electron = {mean_b}\nRMS_muon = {RMS_a}\nmean_electron = {RMS_b}')
    plt.title(r'Distance between e$^{-}$/e$^{+}$ pair production at end'+str(title))
    plt.savefig('/fast_scratch/ipress/emu/skdetsim/plots/distance'+str(name)+'.png')
    plt.close()

def detector_percent(x_dist, angle):
    x_dist = x_dist/100
    y_dist = x_dist*np.abs(np.tan(np.radians(angle)))
    percent_of_detector = (y_dist)
    return percent_of_detector
   

def hits_hist(a, b, bins = None, xlimit = None, name = None, title = None):
    #x = np.logspace(-2, 2.2552725051, num = bins)
    fig = plt.figure()
    ax = fig.add_subplot(111)
    hist_a = ax.hist(a, bins, range = xlimit, align = 'mid', density = True, alpha = 0.5, label = 'Muon hits')
    hist_b = ax.hist(b, bins, range = xlimit, align = 'mid', density = True, alpha = 0.5, label = 'Electron hits')
    ax.grid(linestyle = '--')
    ax.set_xlabel(r'Number of hits')
    ax.set_ylabel('Counts')
    ax.set_xlim(xlimit)
    #plt.xscale("log")
    mean_a = np.round(np.mean(a))
    mean_b = np.round(np.mean(b))
    #RMS_a = rms(a)
    #RMS_b = rms(b)
    std_a = np.round(np.std(a))
    std_b = np.round(np.std(b))
    ax.plot([], [], ' ', label=f"Mean_muon = {mean_a}")
    ax.plot([], [], ' ', label=f"Mean_electron = {mean_b}")
    ax.plot([], [], ' ', label=f"STD_muon = {std_a}")
    ax.plot([], [], ' ', label=f"STD_electron = {std_b}")
    ax.legend()
    ax.set_title(r'Hits for muons and electrons at energies '+str(title))
    plt.savefig('/fast_scratch/ipress/emu/skdetsim/plots/plot_hits_'+str(name)+'.png')
    plt.close()

def charge_hist(a, b, bins = None, xlimit = None, name = None, title = None):
    #x = np.logspace(-2, 2.2552725051, num = bins)
    fig = plt.figure()
    ax = fig.add_subplot(111)
    hist_a = ax.hist(a, bins, range = xlimit, align = 'mid', density = True, alpha = 0.5, label = 'Muon hits')
    hist_b = ax.hist(b, bins, range = xlimit, align = 'mid', density = True, alpha = 0.5, label = 'Electron hits')
    ax.grid(linestyle = '--')
    ax.set_xlabel(r'Total charge')
    ax.set_ylabel('Counts')
    ax.set_xlim(xlimit)
    #plt.xscale("log")
    mean_a = np.round(np.mean(a))
    mean_b = np.round(np.mean(b))
    #RMS_a = rms(a)
    #RMS_b = rms(a)
    std_a = np.round(np.std(a))
    std_b = np.round(np.std(b))
    #ax.text(mean_a, 0, f'mean_muon = {mean_a}\nmean_electron = {mean_b}\nRMS_muon = {RMS_a}\nmean_electron = {RMS_b}')
    ax.plot([], [], ' ', label=f"Mean_muon = {mean_a}")
    ax.plot([], [], ' ', label=f"Mean_electron = {mean_b}")
    ax.plot([], [], ' ', label=f"STD_muon = {std_a}")
    ax.plot([], [], ' ', label=f"STD_electron = {std_b}")
    ax.legend()
    ax.set_title(r'Total charge for muons and electrons at energies '+str(title))
    plt.savefig('/fast_scratch/ipress/emu/skdetsim/plots/plot_charge_'+str(name)+'.png')
    plt.close()

def time_hist(a, b, bins = None, xlimit = None, name = None, title = None):
    #x = np.logspace(-2, 2.2552725051, num = bins)
    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.hist(a, bins, range = xlimit, density = True, alpha = 0.5, label = 'Muon hits')
    ax.hist(b, bins, range = xlimit, density = True, alpha = 0.5, label = 'Electron hits')
    ax.grid(linestyle = '--')
    ax.set_xlabel(r'Average time')
    ax.set_ylabel('Counts')
    #plt.xscale("log")
    ax.set_xlim(xlimit)
    mean_a = np.round(np.mean(a))
    mean_b = np.round(np.mean(b))
    #RMS_a = rms(a)
    #RMS_b = rms(b)
    std_a = np.round(np.std(a))
    std_b = np.round(np.std(b))
    #ax.text(mean_a, 0, f'mean_muon = {mean_a}\nmean_electron = {mean_b}\nRMS_muon = {RMS_a}\nmean_electron = {RMS_b}')
    ax.plot([], [], ' ', label=f"Mean_muon = {mean_a}")
    ax.plot([], [], ' ', label=f"Mean_electron = {mean_b}")
    ax.plot([], [], ' ', label=f"STD_muon = {std_a}")
    ax.plot([], [], ' ', label=f"STD_electron = {std_b}")
    ax.legend()    
    ax.set_title(r'Average time for muons and electrons at energies '+str(title))
    plt.savefig('/fast_scratch/ipress/emu/skdetsim/plots/plot_time_'+str(name)+'.png')
    plt.close()

